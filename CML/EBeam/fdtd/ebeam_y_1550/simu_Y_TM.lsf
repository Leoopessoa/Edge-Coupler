
figs = 0; # 1: plots s params, Norm, and abs(S-S*); 0: no plots
switchtolayout;
FREQ_PTS = 51;    # f points for simulation


lambda_min = 1.5e-6; 	#[m]
lambda_max = 1.6e-6; 	#[m]
#MESH = 1;   	# test,
MESH = 3;   	# final
SIM_TIME = 1000e-15; #Simulation time. 

#Design parameters
Y_length = 14e-6;
wg_width = [480, 500, 520];    # [nm]
wg_thickness = [210, 220, 230]; #    [nm]


##############################


# define global source settings
setglobalsource("wavelength start", lambda_min);
setglobalsource("wavelength stop", lambda_max);
setglobalmonitor("frequency points", FREQ_PTS);
# ********************************************************************************
## WAVEGUIDE FOR COUPLER:
# ********************************************************************************
for(thickness_iter = 1:length(wg_thickness))
{

    for(width_iter = 1:length(wg_width))
    {
        switchtolayout;
        groupscope("::model");
        deleteall;
        addgroup; set("name","coupler"); 
        set("x",0);set("y",0); set("z",0);
        groupscope("coupler");

       

        # # cladding
        addrect; set("name", "Oxide");
        set("x min", -20e-6); set("y min", -10e-6);
        set("x max", 100e-6); set("y max", 10e-6);
        set("z min", -5e-6); set("z max", 5e-6); 
        set("material", 'SiO2 (Glass) - Palik');
        set("alpha",0);
        set("override mesh order from material database", 1);
        set("mesh order", 3);

        ###################################################
        #  IMPORT GDS FOR LAYOUT
        ###################################################
        GDSfilename = 'y_' + num2str(wg_width(width_iter)) + '.gds';
        gdsimport(GDSfilename, "y_branch", 1, 'Si (Silicon) - Palik');
        set('z', 0.11e-6); set('z span', wg_thickness(thickness_iter)*1e-9);
        set('x',0);

        # ********************************************************************************
        # Add the simulation area
        # ********************************************************************************

        groupscope("::model");
        addfdtd; #Add simulation area
        set("z min bc","metal"); set("z max bc","metal");
        set("x min", -Y_length/2); set("x max", Y_length/2);
        set("y min", -4e-6); set("y max", 4e-6);  
        set("z", 0.11e-6);   set("z span", 2.5e-6);
        set("mesh accuracy", MESH);
        set("simulation time",SIM_TIME);
	select("FDTD"); setview("extent"); 

	if (MESH>2){
		addmesh;
		set("z min", 0.11e-6);   set("z max", wg_thickness(thickness_iter));
		set("override x mesh",0);
		set("dy",0.005e-6);
		set("dz",0.02e-6);
		set("x min",-6e-6); set("x max",-4e-6);
		set("y min",-0.7e-6);
		set("y max",0.7e-6);
		set('z', 0.11e-6); set('z span', wg_thickness(thickness_iter)*1e-9);


		}

        addmode; set("name","simulation_port1"); #Add source to the simulation environment.
        set("injection axis","x-axis"); set("direction","Forward");
        set("x", -6.5e-6);  # simulate up to the layout port (wg_width x wg_width box)
        set("y span",2e-6);  
        set("y", 0e-6);
        set("z", 0.11e-6);  set("z span", 2e-6);
	set("theta", 0);
        set('override global source settings', 1);
        set('mode selection', 'fundamental TM mode'); 
        set("enabled",0);      updatesourcemode;
        

        addmode; set("name","simulation_port2"); #Add source to the simulation environment.
        set("injection axis","x-axis"); set("direction","Backward");
        set("x", 6.6e-6);  # 
        set("y span",2e-6);  
        set("y", 2.7e-6);
        set("z", 0.11e-6);  set("z span", 2e-6);
	set("theta", 0);
        set('override global source settings', 1);
        set('mode selection', 'fundamental TM mode'); 
        set("enabled",0);      updatesourcemode;

        addmode; set("name","simulation_port3"); #Add source to the simulation environment.
        set("injection axis","x-axis"); set("direction","Backward");
        set("x", 6.6e-6);  # 
        set("y span",2e-6);  
        set("y", -2.7e-6);
        set("z", 0.11e-6);  set("z span", 2e-6);
	set("theta", 0);
        set('override global source settings', 1);
        set('mode selection', 'fundamental TM mode'); 
        set("enabled",0);      updatesourcemode;
        

        #***********************************************************
        #Monitors
        #***********************************************************

        addpower; set("name", "Port1");# Add power monitor for Port 1
        set('monitor type', '2D X-normal');
        set("x", -6.3e-6);
        set('y', 0e-6); 
        set("y span",2e-6); 
        set("z", 0.11e-6);  set("z span", 2e-6);

        addpower; set("name", "Port2");# Add power monitor for Port 2
        set('monitor type', '2D X-normal');
        set("x", 6.5e-6);
        set('y', 2.7e-6); 
        set("y span",2e-6); 
        set("z", 0.11e-6);  set("z span", 2e-6);


        addpower; set("name", "Port3");# Add power monitor for Port 3
        set('monitor type', '2D X-normal');
        set("x", 6.5e-6);
        set('y', -2.7e-6); 
        set("y span",2e-6); 
        set("z", 0.11e-6);  set("z span", 2e-6);


        #add expansion
        Mode_Selection = 'fundamental TM mode';

        addmodeexpansion; #the fraction of power transmitted into any modes
        set('name', 'TMexpansion1');
        set('monitor type', '2D X-normal');
        set("x", -6.3e-6);
        set('y', 0e-6); 
        set("y span",2e-6); 
        set("z", 0.11e-6);  set("z span", 2e-6);    
        set('frequency points',FREQ_PTS);
        set('mode selection', Mode_Selection);
        setexpansion('Port1TMexpa','Port1');
        
        addmodeexpansion;
        set('name', 'TMexpansion2');
        set('monitor type', '2D X-normal');
        set("x", 6.5e-6);
        set('y', 2.7e-6); 
        set("y span",2e-6); 
        set("z", 0.11e-6);  set("z span", 2e-6);
        set('frequency points',FREQ_PTS);
        set('mode selection', Mode_Selection);
        setexpansion('Port2TMexpa','Port2');

        addmodeexpansion;
        set('name', 'TMexpansion3');
        set('monitor type', '2D X-normal');
        set("x", 6.5e-6);
        set('y', -2.7e-6); 
        set("y span",2e-6); 
        set("z", 0.11e-6);  set("z span", 2e-6);
        set('frequency points',FREQ_PTS);
        set('mode selection', Mode_Selection);
        setexpansion('Port3TMexpa','Port3');

	



  
        ############################################################################
        #RUN
        #################################################################
 
        filename = "Ybranch_TM_Thickness =" + num2str(wg_thickness(thickness_iter)) + " width=" + num2str(wg_width(width_iter));

        if(fileexists(filename)) {rm(filename);} # old files with same name get deleted. 
        sparamFileName="sparam_files/" + filename+".sparam";
        
        textFile="txt_files/" + filename+".txt";  
        matlabFileName="matlab/"+filename+".mat"; 
        fdtdFileName = filename+".fsp";
        if (fileexists(sparamFileName)) { rm(sparamFileName);} # delete Sparam file if it already exists
        if (fileexists(textFile)) { rm(textFile);} # delete text file if it already exists
        if (fileexists(matlabFileName)) { rm(matlabFileName);} # delete the matlab file if it already exists
        if (fileexists(fdtdFileName)){rm(fdtdFileName);}
        #save();
        save(fdtdFileName);
        ###########################################################

        # TM input on port 1:
        switchtolayout;
        select("simulation_port1"); set("enabled",1);
        select("simulation_port2"); set("enabled",0);
        select("simulation_port3"); set("enabled",0);
         run;

        Port1TM=getresult("TMexpansion1","expansion for Port1TMexpa");
        Port2TM=getresult("TMexpansion2","expansion for Port2TMexpa");
        Port3TM=getresult("TMexpansion3","expansion for Port3TMexpa");

	f=Port1TM.f;
        TMTM11=Port1TM.b/Port1TM.a;
        TMTM21=Port2TM.a/Port1TM.a;
        TMTM31=Port3TM.a/Port1TM.a;


        ?"Center wavelength: " + num2str( c/f(length(f)/2+0.5) );
        ?"1to2 power at center wavelength (Input1): " + num2str(abs(TMTM21(length(f)/2+0.5))^2*100) + "%.";
        ?"1to3 power at center wavelength (Input1): " + num2str(abs(TMTM31(length(f)/2+0.5))^2*100) + "%.";
        ?"                              Loss (Input1): " + num2str(100-abs(TMTM31(length(f)/2+0.5))^2*100-abs(TMTM21(length(f)/2+0.5))^2*100) + "%.";

#         ###########################################################

        # TM Input on Port 2:
        switchtolayout;
        select("simulation_port1"); set("enabled",0);
        select("simulation_port2"); set("enabled",1);
        select("simulation_port3"); set("enabled",0);
        run;

        Port1TM=getresult("TMexpansion1","expansion for Port1TMexpa");
        Port2TM=getresult("TMexpansion2","expansion for Port2TMexpa");
        Port3TM=getresult("TMexpansion3","expansion for Port3TMexpa");


        f=Port2TM.f;
        TMTM12=Port1TM.b/Port2TM.b;
        TMTM22=Port2TM.a/Port2TM.b;
        TMTM32=Port3TM.a/Port2TM.b;

       
        ?"2to1 power at center wavelength (Input2): " + num2str(abs(TMTM12(length(f)/2+0.5))^2*100) + "%.";
        ?"2to3 power at center wavelength (Input2): " + num2str(abs(TMTM32(length(f)/2+0.5))^2*100) + "%.";
        ?"                              Loss (Input2): " + num2str(100-abs(TMTM12(length(f)/2+0.5))^2*100-abs(TMTM32(length(f)/2+0.5))^2*100) + "%.";
        
        ###########################################################

        # TM Input on Port 3:
        switchtolayout;
        select("simulation_port1"); set("enabled",0);
        select("simulation_port2"); set("enabled",0);
        select("simulation_port3"); set("enabled",1);
        run;

        Port1TM=getresult("TMexpansion1","expansion for Port1TMexpa");
        Port2TM=getresult("TMexpansion2","expansion for Port2TMexpa");
        Port3TM=getresult("TMexpansion3","expansion for Port3TMexpa");


        f=Port3TM.f;
        TMTM13=Port1TM.b/Port3TM.b;
        TMTM23=Port2TM.a/Port3TM.b;
        TMTM33=Port3TM.a/Port3TM.b;
        
        ?"3to1 power at center wavelength (Input3): " + num2str(abs(TMTM13(length(f)/2+0.5))^2*100) + "%.";
        ?"3to2 power at center wavelength (Input3): " + num2str(abs(TMTM23(length(f)/2+0.5))^2*100) + "%.";
        ?"                              Loss (Input3): " + num2str(100-abs(TMTM13(length(f)/2+0.5))^2*100-abs(TMTM23(length(f)/2+0.5))^2*100) + "%.";
        


        ##########################################
        #WRITE MATRIX
        ##########################################

        freqPts = FREQ_PTS;

        # write matrix for TM to TM
 	portNumber = 3;
	TMModeLabel = "'TM'"; TMModeID = "2"; 
        outMode = TMModeLabel; outModeNum = TMModeID;
        inMode = TMModeLabel; inModeNum = TMModeID;
        SMatrix = [TMTM11, TMTM21, TMTM31, 
                   TMTM12, TMTM22, TMTM32,
                   TMTM13, TMTM23, TMTM33];
        WriteMatrix;
        SMatrixTMTM = SMatrix;


        matlabsave(matlabFileName, f, SMatrixTMTM);
        
        write(textFile,"Center wavelength: " + num2str( c/f(length(f)/2+0.5) ));
        write(textFile,"Mesh accuracy: " + num2str(MESH));
        write(textFile,"1to2 power at center wavelength (Input1): " + num2str(abs(TMTM21(length(f)/2+0.5))^2*100) + "%.");
        write(textFile,"1to3 power at center wavelength (Input1): " + num2str(abs(TMTM31(length(f)/2+0.5))^2*100) + "%.");
        write(textFile,"                              Loss (Input1): " + num2str(100-abs(TMTM31(length(f)/2+0.5))^2*100-abs(TMTM21(length(f)/2+0.5))^2*100) + "%.");
        write(textFile,"2to1 power at center wavelength (Input2): " + num2str(abs(TMTM12(length(f)/2+0.5))^2*100) + "%.");
        write(textFile,"2to3 power at center wavelength (Input2): " + num2str(abs(TMTM32(length(f)/2+0.5))^2*100) + "%.");
        write(textFile,"                              Loss (Input2): " + num2str(100-abs(TMTM12(length(f)/2+0.5))^2*100-abs(TMTM32(length(f)/2+0.5))^2*100) + "%.");
        write(textFile,"3to1 power at center wavelength (Input3): " + num2str(abs(TMTM13(length(f)/2+0.5))^2*100) + "%.");
        write(textFile,"3to2 power at center wavelength (Input3): " + num2str(abs(TMTM23(length(f)/2+0.5))^2*100) + "%.");
        write(textFile,"                              Loss (Input3): " + num2str(100-abs(TMTM13(length(f)/2+0.5))^2*100-abs(TMTM23(length(f)/2+0.5))^2*100) + "%.");
      
        
#test passivity of Smatrix
        ?'Checking TMTM matrix';
        TMTM_norm = matrix(1,FREQ_PTS);
        TMTM_err = TMTM_norm;
        for (ff=1:FREQ_PTS)
        {
            TMTM=[TMTM11(ff),TMTM12(ff),TMTM13(ff),
                  TMTM21(ff),TMTM22(ff),TMTM23(ff),
                  TMTM31(ff),TMTM32(ff),TMTM33(ff)];

            TMTM_norm(ff)=norm(TMTM); 
                   TMTM_err(ff) = max(abs( TMTM-transpose(TMTM)));
        }

        if (max(TMTM_err) > 0.05)
        {
            ? '******* Warning: S parameters violate reciprocity by more than 5% *********';
        }
        if (max(TMTM_norm) > 1.01)
        {
            ? '******* Warning: S parameters not passive *********';
        }
        else 
        {
            if (max(TMTM_norm) <1){
                ? '******* S paramters are passive ********'; 
            }
        }

        if (figs ==1 )
        {
            plot (f, TMTM_norm, 'Wavelength (um)', 
            'Norm |S|', 'Thickness =' + num2str(si_thickness(thickness_iter)) + 'nm width=' + num2str(box_width + boxsize_variation(size_iter)) + ' um');
            plot(c/f*1e6, TMTM_err, 'Wavelength (um)', 'abs(s-transpose(S))','Reciprocity');
        }
    }
}
